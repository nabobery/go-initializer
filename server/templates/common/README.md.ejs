# <%= projectName %>

This is a starter Go project generated by Go Initializer.

## Project Overview

* **Framework:** <% if (framework === 'chi') { %>Chi<% } else if (framework === 'gin') { %>Gin<% } else if (framework === 'echo') { %>Echo<% } else { %><%= framework %><% } %>
* **Database:** <%= database %> <% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>(using GORM)<% } else if (database === 'mongodb') { %>(using official MongoDB Driver)<% } %>
* **Go Version:** <%= goVersion %>
* **Module Path:** <%= modulePath %>
* **Included Features:** <%= options.length ? options.join(', ') : 'None' %>

## Project Structure

This project follows a structure inspired by the [Standard Go Project Layout](https://github.com/golang-standards/project-layout).

* `/cmd/<%= projectName %>/`: Application entry point.
    * `main.go`: Initializes and starts the application.
* `/configs/`: Configuration files.
    * `.env.example`: Example environment variables file. Copy this to `.env`.
* `/internal/`: Private application and library code.
    * `/config/`: Configuration loading (`config.go`) and setup.
        <% if (database !== 'none') { %>* `db.go`: Database connection initialization (GORM or MongoDB).<% } %>
    * `/handlers/`: HTTP request handlers.
        * `hello_handler.go`: Example request handler.
        <% if (options.includes('testify')) { %>* `example_test.go`: Example test file (using Testify).<% } %>
    * `/models/`: (Empty) Data structures, database models.
    * `/repositories/`: (Empty) Data access logic.
    * `/services/`: (Empty) Business logic.
* `/pkg/`: (Empty) Library code safe for external use.
* `/configs`: Configuration files (e.g., `config.yaml`, `.env`).
* `go.mod`, `go.sum`: Go module definitions.

## Getting Started

### Prerequisites

* Go <%= goVersion.match(/\d+\.\d+/)[0] %>+ installed ([Download Go](https://go.dev/dl/))
* <% if (database && database !== 'none' && database !== 'sqlite') { %><%= database.charAt(0).toUpperCase() + database.slice(1) %> database running.<% } %>
* Git

### Setup

1.  **Clone the repository (if applicable):**
    ```bash
    # git clone <your-repo-url>
    # cd <%= projectName %>
    ```

2.  **Install Dependencies:**
    Download the required Go modules.
    ```bash
    go mod download
    ```
    Run `go mod tidy` to ensure `go.mod` and `go.sum` are consistent and to download indirect dependencies.
    ```bash
    go mod tidy
    ```

3.  **Configure Environment:**
    Copy the example configuration file:
    ```bash
    cp configs/.env.example configs/.env
    ```
    Edit `configs/.env` and provide the necessary values, especially for:
    * `SERVER_PORT` (e.g., 8080)
    <% if (database && database !== 'none') { %>* Database connection details (`DB_HOST`/`MONGO_URI`, `DB_PORT`, `DB_USER`/`MONGO_USER`, `DB_PASSWORD`/`MONGO_PASSWORD`, `DB_NAME`/`MONGO_DATABASE`) <% } %>
    * Any other application-specific settings.

### Running the Application

```bash
go run cmd/<%= projectName %>/main.go
```

The server should start, typically on port 8080 (or as configured in `.env`). You can access the basic endpoints:

*   `http://localhost:8080/`
*   `http://localhost:8080/hello`

## Testing

<% if (options.includes('testify')) { %>
This project includes the [Testify](https://github.com/stretchr/testify) toolkit. Use its packages (`assert`, `require`, `mock`, `suite`) in your `_test.go` files for effective testing.

Example:
```go
package main_test // Use test package

import (
  "net/http"
  "net/http/httptest"
  "testing"

  "github.com/stretchr/testify/assert"
  // Import your router setup function or main package
)

func TestHelloWorldEndpoint(t *testing.T) {
  // Setup your router (similar to main.go but potentially simplified for tests)
  // router := SetupRouter() // Assuming you have a test setup function

  // req, _ := http.NewRequest("GET", "/hello", nil)
  // w := httptest.NewRecorder()
  // router.ServeHTTP(w, req) // Serve the request

  // assert.Equal(t, http.StatusOK, w.Code)
  // assert.Contains(t, w.Body.String(), "Hello, World!")
}
```
<% } else { %>
Place your test files (`_test.go`) alongside the code they test. Use the standard `testing` package and potentially `net/http/httptest` for handler testing.
<% } %>

Run tests using:
```bash
go test ./...
```
Run tests with coverage:
```bash
go test ./... -coverprofile=coverage.out && go tool cover -html=coverage.out
```

## Logging

<% if (options.includes('logrus')) { %>
This project uses [Logrus](https://github.com/sirupsen/logrus) for structured logging. You can use `log.Info`, `log.Warn`, `log.Error`, etc., throughout your code. The logger is configured in `main.go`.
<% } else if (options.includes('zap')) { %>
This project uses [Zap](https://github.com/uber-go/zap) for high-performance structured logging. Use the `sugar` logger (injected into handlers) for convenient logging, e.g., `sugar.Infow("message", "key", "value")`. The logger is configured in `main.go`.
<% } else { %>
This project uses the standard Go logger (`log` package). Consider adding a structured logger like Zap or Logrus for more complex applications.
<% } %>

## Key Chi Middleware Used

*   `middleware.RequestID`: Adds a unique ID to each request context.
*   `middleware.RealIP`: Sets `r.RemoteAddr` to the real IP address from `X-Forwarded-For` or `X-Real-IP` headers.
*   `middleware.Logger`: Logs request start/end and processing time (basic). Consider `go-chi/httplog` for structured logging.
*   `middleware.Recoverer`: Recovers from panics, logs the stack trace, and returns a 500 error.
*   `middleware.Timeout`: Sets a timeout deadline on the request context.

See the [Chi Middleware documentation](https://github.com/go-chi/chi#middlewares) for more available middleware.
