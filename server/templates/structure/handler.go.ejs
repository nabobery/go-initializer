package handlers

import (
	"encoding/json" // Needed for Chi handler
	"net/http"

	"<%= modulePath %>/internal/config"
	<% if (database === 'mongodb') { %>"go.mongodb.org/mongo-driver/mongo"<% } %>
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>"gorm.io/gorm"<% } %>
	<% if (framework === 'gin') { %>"github.com/gin-gonic/gin"<% } %>
	<% if (framework === 'echo') { %>"github.com/labstack/echo/v4"<% } %>
	<%# No direct chi import needed here unless using specific chi context utils %>
	<% if (options.includes('zap')) { %>"go.uber.org/zap"<% } %>
	// Add other necessary imports like "context", "fmt", "time" etc. if needed for logic
)

// HelloHandler holds dependencies for hello world handlers
type HelloHandler struct {
	Config *config.Config
	<% if (options.includes('zap')) { %>Logger *zap.SugaredLogger<% } %>
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>DB     *gorm.DB<% } %>
	<% if (database === 'mongodb') { %>MongoCollection *mongo.Collection // Example: Pass a specific collection<% } %>
	// Add other dependencies like services, repositories if needed
}

// NewHelloHandler creates a new HelloHandler instance
func NewHelloHandler(
	cfg *config.Config,
	<% if (options.includes('zap')) { %>logger *zap.SugaredLogger,<% } %>
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>db *gorm.DB,<% } %>
	<% if (database === 'mongodb') { %>mongoCollection *mongo.Collection,<% } %>
) *HelloHandler {
	// Determine the type of db connection based on the database chosen
	<% let dbArg = "nil" %>
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { dbArg = "db" } %>
	<% let mongoArg = "nil" %>
	<% if (database === 'mongodb') { mongoArg = "mongoCollection" } %>

	return &HelloHandler{
		Config: cfg,
		<% if (options.includes('zap')) { %>Logger: logger,<% } %>
		<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>DB:     db,<% } %>
		<% if (database === 'mongodb') { %>MongoCollection: mongoCollection,<% } %>
	}
}


<%# --- Gin Handler --- %>
<% if (framework === 'gin') { %>
// HelloWorld is a simple handler for Gin
func (h *HelloHandler) HelloWorld(c *gin.Context) {
	<% if (options.includes('zap')) { %>h.Logger.Info("HelloWorld handler invoked (Gin)")<% } %>

	// Example: Access config
	// appName := h.Config.App.Name

	// Example: Access DB (GORM)
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>
	// var count int64
	// h.DB.Model(&YourModel{}).Count(&count)
	// h.Logger.Infof("Example DB interaction: Found %d records.", count)
	<% } %>

	// Example: Access DB (Mongo)
	<% if (database === 'mongodb') { %>
	// count, err := h.MongoCollection.CountDocuments(c.Request.Context(), bson.M{})
	// if err != nil { h.Logger.Errorw("Failed to count documents", "error", err) }
	// h.Logger.Infof("Example DB interaction: Found %d documents.", count)
	<% } %>


	c.JSON(http.StatusOK, gin.H{
		"message": "Hello, World!",
		"framework": "<%= framework %>",
		"database": "<%= database %>",
		"features": "<%= options.join(', ') %>",
		// "appName": appName,
	})
}
<% } %>

<%# --- Echo Handler --- %>
<% if (framework === 'echo') { %>
// HelloWorldEcho is a simple handler for Echo
func (h *HelloHandler) HelloWorldEcho(c echo.Context) error {
	<% if (options.includes('zap')) { %>h.Logger.Info("HelloWorld handler invoked (Echo)")<% } %>

	// Example: Access config
	// appName := h.Config.App.Name

	// Example: Access DB (GORM)
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>
	// var count int64
	// h.DB.Model(&YourModel{}).Count(&count)
	// h.Logger.Infof("Example DB interaction: Found %d records.", count)
	<% } %>

	// Example: Access DB (Mongo)
	<% if (database === 'mongodb') { %>
	// count, err := h.MongoCollection.CountDocuments(c.Request().Context(), bson.M{})
	// if err != nil { h.Logger.Errorw("Failed to count documents", "error", err) }
	// h.Logger.Infof("Example DB interaction: Found %d documents.", count)
	<% } %>

	return c.JSON(http.StatusOK, map[string]interface{}{
		"message": "Hello, World!",
		"framework": "<%= framework %>",
		"database": "<%= database %>",
		"features": "<%= options.join(', ') %>",
		// "appName": appName,
	})
}
<% } %>

<%# --- Chi Handler --- %>
<% if (framework === 'chi') { %>
// HelloWorldChi is a simple handler for Chi (standard http.HandlerFunc)
func (h *HelloHandler) HelloWorldChi(w http.ResponseWriter, r *http.Request) {
	<% if (options.includes('zap')) { %>h.Logger.Info("HelloWorld handler invoked (Chi)")<% } %>

	// Example: Access config
	// appName := h.Config.App.Name

	// Example: Access DB (GORM)
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>
	// var count int64
	// h.DB.Model(&YourModel{}).Count(&count)
	// h.Logger.Infof("Example DB interaction: Found %d records.", count)
	<% } %>

	// Example: Access DB (Mongo)
	<% if (database === 'mongodb') { %>
	// count, err := h.MongoCollection.CountDocuments(r.Context(), bson.M{}) // Use r.Context()
	// if err != nil { h.Logger.Errorw("Failed to count documents", "error", err) }
	// h.Logger.Infof("Example DB interaction: Found %d documents.", count)
	<% } %>

	// Prepare response data
	responseData := map[string]interface{}{
		"message": "Hello, World!",
		"framework": "<%= framework %>",
		"database": "<%= database %>",
		"features": "<%= options.join(', ') %>",
		// "appName": appName,
	}

	// Set content type and write response
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	err := json.NewEncoder(w).Encode(responseData)
	if err != nil {
		// Log error if response writing fails
		<% if (options.includes('zap')) { %>
		h.Logger.Errorw("Failed to write JSON response", "error", err)
		<% } else { %>
		// Use standard log or logrus if zap is not available
		http.Error(w, "Failed to write response", http.StatusInternalServerError)
		<% } %>
	}
}
<% } %>