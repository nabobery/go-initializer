package main

import (
	"context"
	"fmt"
	"log" // Standard log, replace if Logrus/Zap selected
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"<%= modulePath %>/internal/config"
	"<%= modulePath %>/internal/handlers"
	<% if (database === 'mongodb') { %>"<%= modulePath %>/internal/database/mongo"<% } %>
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>"<%= modulePath %>/internal/database/gorm"<% } %>

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	<% if (options.includes('logrus')) { %>log "github.com/sirupsen/logrus" // Override standard log<% } %>
	<% if (options.includes('zap')) { %>"go.uber.org/zap"<% } %>
)

func main() {
	// Load Configuration
	cfg, err := config.LoadConfig("./configs")
	if err != nil {
		<% if (options.includes('zap')) { %>
		basicLogger, _ := zap.NewProduction()
		basicLogger.Fatal("cannot load config:", zap.Error(err))
		<% } else { %>
		log.Fatalf("cannot load config: %v", err)
		<% } %>
	}

	// --- Logger Setup ---
	<% if (options.includes('logrus')) { %>
	log.SetFormatter(&log.JSONFormatter{})
	log.SetOutput(os.Stdout)
	log.SetLevel(log.DebugLevel) // Adjust level based on config
	log.Info("Logrus logger initialized")
	<% } %>
	<% if (options.includes('zap')) { %>
	logger, _ := zap.NewProduction() // Or zap.NewDevelopment()
	defer logger.Sync()
	sugar := logger.Sugar()
	sugar.Info("Zap logger initialized")
	// Use 'sugar' for logging
	<% } %>

	// --- Database Connection ---
	<% if (['postgres', 'mysql', 'sqlite'].includes(database)) { %>
	db, err := gormdb.Connect(&cfg.Database)
	if err != nil {
		<% if (options.includes('zap')) { %>sugar.Fatalw("failed to connect to database", "error", err)<% } else { %>log.Fatalf("failed to connect to database: %v", err)<% } %>
	}
	<% if (options.includes('zap')) { %>sugar.Info("Database connected successfully")<% } else { %>log.Println("Database connected successfully")<% } %>
	<% } %>
	<% if (database === 'mongodb') { %>
	mongoClient, err := mongodb.Connect(&cfg.Mongo)
	if err != nil {
		<% if (options.includes('zap')) { %>sugar.Fatalw("failed to connect to mongodb", "error", err)<% } else { %>log.Fatalf("failed to connect to mongodb: %v", err)<% } %>
	}
	defer func() {
		if err = mongoClient.Disconnect(context.Background()); err != nil {
			<% if (options.includes('zap')) { %>sugar.Errorw("error disconnecting mongodb", "error", err)<% } else { %>log.Printf("error disconnecting mongodb: %v\n", err)<% } %>
		}
		<% if (options.includes('zap')) { %>sugar.Info("MongoDB connection closed")<% } else { %>log.Println("MongoDB connection closed")<% } %>
	}()
	mongoCollection := mongoClient.Database(cfg.Mongo.Name).Collection("your_collection_name")
	<% if (options.includes('zap')) { %>sugar.Info("MongoDB connected successfully")<% } else { %>log.Println("MongoDB connected successfully")<% } %>
	<% } %>


	// --- Echo Setup ---
	e := echo.New()
	e.HideBanner = true // Hide Echo banner on startup

	// --- Middleware ---
	e.Use(middleware.Logger())  // Echo's built-in logger
	e.Use(middleware.Recover()) // Recovers from panics
	// Example: CORS Middleware
	// e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
	// AllowOrigins: []string{"*"}, // Adjust for production
	// AllowMethods: []string{http.MethodGet, http.MethodPut, http.MethodPost, http.MethodDelete},
	// }))

	// --- Routes ---
	// Simple health check / hello world
	helloHandler := handlers.NewHelloHandler(cfg <% if (options.includes('zap')) { %>, sugar<% } %> <% if (database !== 'none') { %>, db<% } %> <% if (database === 'mongodb') { %>, mongoCollection<% } %>)
	e.GET("/", helloHandler.HelloWorldEcho) // Use Echo specific handler signature

	// Add more routes and groups
	// g := e.Group("/api/v1")
	// g.GET("/items", itemHandler.GetItemsEcho)


	// --- Start Server ---
	serverPort := fmt.Sprintf(":%d", cfg.Server.Port)

	go func() {
		<% if (options.includes('zap')) { %>sugar.Infof("Server starting on port %s", serverPort)<% } else { %>log.Printf("Server starting on port %s\n", serverPort)<% } %>
		if err := e.Start(serverPort); err != nil && err != http.ErrServerClosed {
			<% if (options.includes('zap')) { %>sugar.Fatalw("server error", "error", err)<% } else { %>e.Logger.Fatal("shutting down the server due error: %v", err)<% } %>
		}
	}()


	// --- Graceful Shutdown ---
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	<% if (options.includes('zap')) { %>sugar.Info("Shutting down server...")<% } else { %>log.Println("Shutting down server...")<% } %>

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second) // Increased timeout for Echo
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		<% if (options.includes('zap')) { %>sugar.Fatalw("Server forced to shutdown:", "error", err)<% } else { %>e.Logger.Fatal("Server forced to shutdown:", err)<% } %>
	}
	<% if (options.includes('zap')) { %>sugar.Info("Server exiting")<% } else { %>log.Println("Server exiting")<% } %>
}